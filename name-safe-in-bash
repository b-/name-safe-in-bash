#!/bin/bash -i

output_shell_builtins_and_keywords() { compgen -b -k;}

# Here we use the more cryptic one letter options instead of the longer somewhat
# less cryptic ones supported by GNU coreutils to allow for environments where
# Bash is being used with other coreutils implementations.
output_shell_function_names() { declare -F | cut -d ' ' -f 3;}
output_shell_alias_names() { alias | cut -d = -f 1 | cut -d ' ' -f 2;}

# Limitation: if for some unholy/unlikely reason there's a space in any of the
# directories in PATH or in executable names this will fail.
output_commands_found_in_path() {
  local directory
  for directory in `echo $PATH | sed 's/:/ /g'`; do
    ls -A $directory 2>/dev/null; done;}

output_name_if_known_to_dnf() { dnf provides "$1" >/dev/null 2>&1 && echo "$1";}
output_name_if_known_to_yum() { yum provides "$1" >/dev/null 2>&1 && echo "$1";}
output_name_if_known_to_zypper() { zypper what-provides "$1" >/dev/null 2>&1 && echo "$1";}

output_names_for_edit_distance_comparision() {
  local -r proposed_name="$1"
  { output_shell_builtins_and_keywords
    output_shell_function_names
    output_shell_alias_names
    output_commands_found_in_path
    output_name_if_known_to_dnf "$proposed_name"
    output_name_if_known_to_yum "$proposed_name"
    output_name_if_known_to_zypper "$proposed_name";} | sort | uniq;}

# Taken from here with some very slight modifications:
# https://gist.github.com/benpitman/e1e3c158040dc78b017ce7ac6b94a9fa 
output_levenshtein_distance() {
    local -r -- target=$1
    local -r -- given=$2
    local -r -- targetLength=${#target}
    local -r -- givenLength=${#given}
    local -- alt
    local -- cost
    local -- ins
    local -- gIndex=0
    local -- lowest
    local -- nextGIndex
    local -- nextTIndex
    local -- tIndex
    local -A -- leven
    while (( $gIndex <= $givenLength )); do
        tIndex=0
        while (( $tIndex <= $targetLength )); do
            (( $gIndex == 0 )) && leven[0,$tIndex]=$tIndex
            (( $tIndex == 0 )) && leven[$gIndex,0]=$gIndex
            (( tIndex++ ))
        done
        (( gIndex++ ))
    done
    gIndex=0
    while (( $gIndex < $givenLength )); do
        tIndex=0
        while (( $tIndex < $targetLength )); do
            [[ "${target:tIndex:1}" == "${given:gIndex:1}" ]] && cost=0 || cost=1
            (( nextTIndex = $tIndex + 1 ))
            (( nextGIndex = $gIndex + 1 ))
            (( del = leven[$gIndex,$nextTIndex] + 1 ))
            (( ins = leven[$nextGIndex,$tIndex] + 1 ))
            (( alt = leven[$gIndex,$tIndex] + $cost ))
            (( lowest = $ins <= $del ? $ins : $del ))
            (( lowest = $alt <= $lowest ? $alt : $lowest ))
            leven[$nextGIndex,$nextTIndex]=$lowest
            (( tIndex++ ))
        done
        (( gIndex++ ))
    done
    echo $lowest;}

show_basic_usage() { echo 'usage: name-safe-in-bash <proposed_name>'; exit;}

main() {
  if [ $# != 1 ]; then show_basic_usage; fi
  local -r proposed_name="$1"
  local maybe_similar_name
  for maybe_similar_name in `output_names_for_edit_distance_comparision`; do
    echo \
      `output_levenshtein_distance "$proposed_name" "$maybe_similar_name"` \
      "$maybe_similar_name"
  done | sort -n -r;}

main "$@"
